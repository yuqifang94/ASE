BiocManager::install("qvalue")
library(bsseq)
matrix(c(1,2,3,4),nrow=2)
matrix(c(1,2,3,4),nrow=2,byrow = TRUE)
for (i=1:5){x=x+150*1.03}
x=0
for (i %in% 1:5){x=x+x*0.03}
x=150
for (i in 1:5){x=x+x*0.03}
x
for (i in 1:5){x=x+x*0.03}
x
x=150
for (i in 1:5){print(i)}
for (i in 1:5){x=x+x*0.03}
i
for (i <=5){x=x+x*0.03;x=x+1}
for (i <=5){x=x+x*0.03;i=i+1}
i=0
for (i <=5){x=x+x*0.03;i=i+1}
for (i < 5){x=x+x*0.03;i=i+1}
while (i <=5){x=x+x*0.03;i=i+1}
x
x=150
i
x+x*0.03
(x+x*0.03)*0.03+x
for (i in 1:5){x=x+x*1.03}
x
150*5
for (i in 1:5){x=x+x*1}
x
x=150
for (i in 1:5){x=x+x*1}
x
for (i in 1:5){x=x+x}
x=150
for (i in 1:5){x=x+x}
x
150+150
for (i in 1:5){x=x+150}
x
x=150
for (i in 1:5){x=x+150}
x
x
x=0
x
for (i in 1:5){x=x+150}
x
for (i in 1:5){x=x*1.03+150}
x
for (i in 1:5){x=x*1+150}
x=0
for (i in 1:5){x=x*1+150}
x
150*1.03^5
5*1.05^5
5*1.^5
5*1.2^5
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("motifbreakR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("motifbreakR")
cont_imprinting=matrix(c(69,564,204,1500),nrow=2)
fisher.test(cont_imprinting)#60.58
46*9
46*9+9*8
46*5+4*5
46*5+4*5/2
46*5+choose(2,5)
choose(2,5)
choose(5,2)
46*5+choose(5,2)
46+4
setwd("C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/cluster_code")
source('mainFunctions_sub.R')
setwd("C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/cluster_code")
setwd("C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE")
source('mainFunctions_sub.R')
cluster_GO=readRDS('../downstream/output/mouse_analysis/GO_analysis/cluster_all_regions_GO.rds')
do.call(rbind,lapply(cluster_GO,function(x) x[FC>=1.5&FDR<=0.1]))
library(data.table)
do.call(rbind,lapply(cluster_GO,function(x) x[FC>=1.5&FDR<=0.1]))
do.call(rbind,lapply(cluster_GO,function(x) x[FC>=1.5&FDR<=0.1,list(Term, FC,FDR, cluster,genes)]))
do.call(rbind,lapply(cluster_GO,function(x) x[FC>=1.5&FDR<=0.1,list(Term, FC,FDR, cluster)]))
write.csv(do.call(rbind,lapply(cluster_GO,function(x) x[FC>=1.5&FDR<=0.1,list(Term, FC,FDR, cluster)])),'../downstream/output/graphs_tables/All_region_70_cluster/GO_terms_all_70.csv'
)
cluster_GO[[58]]
cluster_GO[[58]][,list(Term,p_cond,FDR)]
cluster_GO[[58]][,list(Term,p_cond,FDR,FC)]
cluster_GO[[58]][,list(Term,p_cond,FDR,FC)][1:10]
cluster_GO[[58]][,list(Term,p_cond,FDR,FC,genes)][1:10]
clu=readRDS(paste0('../downstream/output/mouse_analysis/clustering/UC_cluster_all_time_',123,'.rds'))
clu=order_clu(UC_in_matrix_ls_red_ft,clu)
order_clu<-function(UC_in_mt,clu){
clum <- rowsum(UC_in_mt,clu)/as.vector(table(clu))
n <- names(clu)
maxp <- apply(clum,1,function(i) {
i[i < 0] <- 0
i <- i-min(i)
i <- i/max(i)
sum(i*c(1:length(i)))/sum(i)
})
clu <- rank(maxp)[clu]
names(clu) <- n
return(clu)
}
clu=order_clu(UC_in_matrix_ls_red_ft,clu)
#Local run
UC_in_matrix_ls_red_ft=readRDS('../downstream/output/mouse_analysis/clustering/UC_in_matrix_ls_red_ft.rds')
clu=order_clu(UC_in_matrix_ls_red_ft,clu)
#sub_sample=sample(1:length(clu),round(length(clu)/100))
#clu=sort(clu[sub_sample])
clu=sort(clu)
#GO analysis
#Background
bg=convert_GR(names(clu))
source('C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/mainFunctions_sub.R')
source('C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/mainFunctions_sub.R')
convert_GR<-function(x,direction="GR"){
if(direction=="GR"){
strand=unlist(lapply(strsplit(x,','),function(x)x[2]))
strand=ifelse(is.na(strand),"*",strand)
x=ifelse(is.na(strand),x,sub(paste0(',\\','-'),'',sub(paste0(',\\','+'),'',x)))
gr=GRanges(seqnames=sub(':.*','',x),
IRanges(start=as.numeric(sub('-.*','',sub('.*:','',x))),
end=as.numeric(sub('.*-','',x))),strand=strand)
return(gr)}else
if(direction=="DT"){
x_dt=as.data.table(mcols(x))
x_dt$region=paste0(seqnames(x),':',start(x),'-',end(x))
return(x_dt)
}else
if(direction=="matrix"){
x_mt=as.matrix(mcols(x))
rownames(x_mt)=paste0(seqnames(x),':',start(x),'-',end(x))
return(x_mt)
}
}
source('C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/file_path.R')
enhancer=readRDS(enhancer_region_fn)
bg=enhancer$`Target Gene`
cluster_GO=list()
i=58
GO_run(unique(enhancer_clu_i$`Target Gene`),bg,cluster=i)
#GO annotation
GO_run<-function(gl,back,cluster,ptcount=0){
geneList <- factor(as.integer(back %in% gl))
names(geneList) <- back
suppressMessages({GOdata <- new("topGOdata", ontology = "BP", allGenes = geneList,geneSel=function(a) {a},
annot = annFUN.org, mapping = "org.Mm.eg.db", ID = "Symbol")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")})
# pval <- score(resultFisher)
# pval_adj <- p.adjust(pval, method="BH")
sigres <- GenTable(GOdata, classicFisher = resultFisher, topNodes = length(resultFisher@score),orderBy="classicFisher",numChar=1000)
sigres<-sigres[sigres$Annotated>=10,]
#sigres$FDR <- pval_adj[sigres$GO.ID]
sigres$classicFisher[sigres$classicFisher=="< 1e-30"] <- 0
sigres$FDR <-p.adjust(sigres$classicFisher,method='BH')
fc <- ((sigres[,"Significant"])/(sum(GOdata@allScores[GOdata@feasible]==1)))/((sigres[,"Annotated"])/(sum(GOdata@feasible)))
sigres <- data.frame(sigres,FC=fc)
sigres <- sigres[order(as.numeric(sigres$FDR),-sigres$FC),]
sigres=as.data.table(sigres)
siggene_forID=lapply(sigres$GO.ID,function(x,GOdata){
gene=sigGenes(GOdata)[sigGenes(GOdata)%in%unlist(genesInTerm(GOdata, x))]
gl_dt=data.table(rank=1:length(gl),gene=gl)
mt=match(gl_dt$gene,gene)
mt=mt[!is.na(mt)]
highest_rank=NA
return(list(paste(gene[mt],collapse =";"),highest_rank))
},GOdata=GOdata)
siggene=unlist(lapply(siggene_forID,function(x) x[[1]]))
max_rank=unlist(lapply(siggene_forID,function(x) x[[2]]))
if(nrow(sigres)>0){
sigres$genes=siggene
sigres$higest_ranks=max_rank
}
sigres$cluster=cluster
sigres$feasible_allscore=sum(GOdata@allScores[GOdata@feasible]==1)
sigres$feasible=sum(GOdata@feasible)
#Find probability of P(sig annotaetd =0)
#sigres$sig_all=length(gl)
#sigres$bg_all=length(bg)
#GO data store significant genes
sigres$sig_all=sum(GOdata@allScores[GOdata@feasible]==1)
#GO data store total annotated genes
sigres$bg_all=sum(GOdata@feasible)
sigres$non_anno_non_sig=sigres$bg_all-sigres$Annotated-sigres$sig_all
#Annotated non-sig = Annotated
#non_annotated_sig=total sig
#Annotated_sig=0
#choose(a+b,a)=1 given a=0
sigres$p0_choose=choose(sigres$bg_all-sigres$Annotated,sigres$sig_all)/choose(sigres$bg_all,sigres$sig_all)
sigres$p0=phyper(0,sigres$sig_all,sigres$bg_all-sigres$sig_all,sigres$Annotated)
sigres=sigres[Significant!=0]
sigres$p_fs=sigres[,list(p_fisher=fisher_GO(Significant,Annotated,bg_all,sig_all)),by = seq_len(nrow(sigres))]$p_fisher
sigres$p_cond=as.numeric(sigres$p_fs)/(1-sigres$p0)
sigres$FDR=p.adjust(sigres$p_cond,method="BH")
return(sigres)
}
fisher_GO<-function(Significant,Annotated,bg_all,sig_all){
cont_table=matrix(c(Significant ,sig_all-Significant,Annotated-Significant,bg_all-Annotated-sig_all+Significant),nrow=2)
return(fisher.test(cont_table)$p.value)
}
GO_run_tissue<-function(ts,dir_in,enc_type,region_type_sel=NA,bg=NULL,DNase=TRUE){
#ranking_stat = "dNME_maxUC" or "dMML_maxUC"
GO_out_all=list()
csv_files=dir(dir_in,pattern="csv")
cat("Processing:",ts,'\n')
fn=paste0(ts,'.csv')
#read in csv file for given tissue
csv_in_ts=fread(paste0(dir_in,fn))
#Note some times Jason use dNME_maxJSD_rank
csv_in_ts=csv_in_ts[order(dNME_max_UC_pair_adj,decreasing = T)]
if(DNase){
csv_in_ts=csv_in_ts[which(csv_in_ts$DNAase)]
print(csv_in_ts)
}
# Getting enhancer
print(enc_type)
if(enc_type=="enhancer"){
enhancer=readRDS(bin_enhancer_rds)
csv_in_gr=convert_GR(csv_in_ts$regions)
mcols(csv_in_gr)=csv_in_ts
olap=findOverlaps(csv_in_gr,enhancer)
csv_in_gr=csv_in_gr[queryHits(olap)]
csv_in_gr$gene=enhancer$`Target Gene`[subjectHits(olap)]
csv_in_gr$distance=NA
csv_in_ts=as.data.table(mcols(csv_in_gr))
}else
if(enc_type=="promoter"){
csv_in_ts=csv_in_ts[abs(distance)<=2000]
}
if(region_type_sel!="all"){
csv_in_ts=csv_in_ts[region_type==region_type_sel]
print(csv_in_ts)
}
#GO annotation
if(nrow(csv_in_ts)>1){
#GO annotation for each cluster
print(nrow(csv_in_ts))
csv_out=lapply(1:max(csv_in_ts$cluster),function(clu){
sp=paste0(ts,'-',clu)
csv_in_ts_clu=csv_in_ts[cluster==clu]
if(nrow(csv_in_ts_clu)>1){
cat('start processing cluster:',clu,'\n')
tt1=proc.time()[[3]]
cat('length of background gene:',length(bg),'\n')
GO_out_cluster=GO_run(unique(csv_in_ts_clu$gene),bg,cluster=clu)
csv_in_ts_clu$GO_result=unlist(lapply(csv_in_ts_clu$gene,function(x) paste(GO_out_cluster$Term[grepl(x,GO_out_cluster$genes)],collapse = ';')))
cat('Finish processing cluster:',clu,'in:',proc.time()[[3]]-tt1,'\n')
return(list(GO_out_cluster_all=GO_out_cluster,csv_in_ts_clu=csv_in_ts_clu))
}
})
}
print(csv_out[[1]]$GO_out_cluster_all)
return(csv_out)
}
dcast_matrix<-function(dt_in,value_in,order=T){
dt_in=dcast.data.table(dt_in,Term~tissue_clu,value.var  = value_in,fill=1)
dt_in_mt=as.matrix(dt_in[,-1])
rownames(dt_in_mt)=dt_in$Term
if(nrow(dt_in_mt)>1&order==T){
dt_in_mt=dt_in_mt[order(max.col(dt_in_mt)),]
#dt_in_mt=dt_in_mt[,order(as.numeric(colnames(dt_in_mt)))]
}
return(dt_in_mt)
}
GO_run(unique(enhancer_clu_i$`Target Gene`),bg,cluster=i)
clu_i_GR= convert_GR(names(clu[clu==i]))
library(GenomicRanges)
enhancer_clu_i=subsetByOverlaps(enhancer,clu_i_GR)
clu_i_GR= convert_GR(names(clu[clu==i]))
enhancer_clu_i=subsetByOverlaps(enhancer,clu_i_GR)
enhancer
enhancer=readRDS(bin_enhancer_rds)
bg=enhancer$`Target Gene`
enhancer=readRDS(bin_enhancer_rds)
enhancer=readRDS(bin_enhancer_rds)
bg=enhancer$`Target Gene`
cluster_GO=list()
clu_i_GR= convert_GR(names(clu[clu==i]))
enhancer_clu_i=subsetByOverlaps(enhancer,clu_i_GR)
GO_run(unique(enhancer_clu_i$`Target Gene`),bg,cluster=i)
source('C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/mainFunctions_sub.R')
source('C:/Users/vince/Dropbox/JHU/Projects/Allele-spcific/code/Science_ASE/mainFunctions_sub.R')
install.packages('rmarkdown')
install.packages("rmarkdown")
